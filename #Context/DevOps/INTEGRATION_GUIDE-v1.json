{
  "decision_id": "INTEGRATION_GUIDE-v1",
  "category": "DevOps",
  "version_history": [
    {
      "version": "1.0",
      "timestamp": "2025-03-23T10:42:00Z",
      "change_type": "Initial Implementation",
      "files_affected": ["README.md"],
      "issues_resolved": [
        {
          "id": "DEV-001",
          "description": "Frontend-Backend integration guidelines",
          "resolution": "Documented integration strategy for local and production deployment"
        }
      ],
      "validation": {
        "testing": "Manual review",
        "rollback": "Git revert to pre-document state"
      }
    }
  ],
  "integration_strategy": {
    "development": {
      "frontend": {
        "server": "Vite dev server",
        "url": "http://localhost:5173",
        "command": "npm run dev"
      },
      "backend": {
        "server": "Django development server",
        "url": "http://localhost:8000",
        "command": "python manage.py runserver"
      },
      "connection": {
        "api_base_url": "http://localhost:8000/api",
        "cors_configuration": true,
        "proxy_setup": false
      },
      "environment_variables": {
        "frontend": {
          "VITE_API_URL": "http://localhost:8000/api"
        },
        "backend": {
          "DJANGO_ALLOWED_HOSTS": "localhost,127.0.0.1",
          "CORS_ALLOWED_ORIGINS": "http://localhost:5173"
        }
      }
    },
    "testing": {
      "api_contract_validation": {
        "strategy": "Integration tests between frontend and backend",
        "tools": ["Cypress", "Django TestCase"],
        "approach": "Test each API endpoint against contract specifications"
      },
      "auth_flow_testing": {
        "strategy": "End-to-end tests for registration, login, and authenticated requests",
        "tools": ["Cypress"],
        "approach": "Simulate real user flows through the application"
      }
    },
    "production": {
      "options": [
        {
          "strategy": "Separate deployment",
          "frontend": {
            "hosting": "Static hosting (S3, Netlify, Vercel)",
            "build_command": "npm run build",
            "output_dir": "dist"
          },
          "backend": {
            "hosting": "Django server (AWS, DigitalOcean, Heroku)",
            "wsgi_server": "Gunicorn"
          },
          "connection": {
            "api_base_url": "https://api.yourdomain.com",
            "cors_required": true
          }
        },
        {
          "strategy": "Django serves React",
          "setup": "Django serves the built React application as static files",
          "build_process": "Build React app and copy to Django static files",
          "pros": [
            "Single deployment",
            "No CORS issues",
            "Simplified authentication"
          ],
          "cons": ["Less specialized hosting", "Mixed responsibilities"]
        }
      ]
    }
  },
  "prerequisites": {
    "frontend": ["Node.js 18+", "npm 9+"],
    "backend": ["Python 3.10+", "Django 5.0+", "Django REST Framework 3.14+"]
  },
  "setup_instructions": {
    "local_development": [
      "Clone both repositories (Frontend and Backend)",
      "Set up environment variables as described in the development section",
      "Run npm install in the frontend project",
      "Run pip install -r requirements.txt in the backend project",
      "Start the backend with python manage.py runserver",
      "Start the frontend with npm run dev",
      "Access the application at http://localhost:5173"
    ]
  },
  "integration_checklist": [
    "Backend implements all endpoints defined in API_CONTRACT-v1.json",
    "User model and serializers match DATA_MODELS-v1.json specifications",
    "Authentication mechanism matches AUTH_SCHEMA-v1.json",
    "CORS configured properly on the backend",
    "Environment variables set correctly on both projects",
    "Test login/logout flow works end-to-end",
    "Test API data retrieval with authenticated requests",
    "Verify error handling matches the defined format"
  ],
  "code_impact": [
    "frontend/.env",
    "backend/config/settings.py",
    "backend/config/urls.py"
  ],
  "tech_stack": ["React", "Django", "Vite", "Django REST Framework"]
}
