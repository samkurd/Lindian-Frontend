{
  "decision_id": "AUTH_SCHEMA-v1",
  "category": "Security",
  "version_history": [
    {
      "version": "1.0",
      "timestamp": "2025-03-23T10:40:00Z",
      "change_type": "Initial Implementation",
      "files_affected": ["src/services/api.ts", "src/services/userService.ts"],
      "issues_resolved": [
        {
          "id": "SEC-001",
          "description": "Authentication mechanism definition",
          "resolution": "Defined session-based auth with CSRF protection"
        }
      ],
      "validation": {
        "testing": "Manual validation against existing implementation",
        "rollback": "Git revert to pre-schema state"
      }
    }
  ],
  "auth_schema": {
    "primary_mechanism": "Session-based Authentication",
    "csrf_protection": true,
    "token_option": {
      "implemented": false,
      "notes": "Current frontend also supports JWT if Django backend implements it"
    },
    "frontend_implementation": {
      "credentials": "include",
      "cookies": "Automatically handled by browser",
      "headers": "CSRF token automatically included by Django for non-GET requests"
    },
    "django_implementation": {
      "middleware": [
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware"
      ],
      "settings": {
        "CSRF_COOKIE_SAMESITE": "Lax",
        "CSRF_COOKIE_SECURE": true,
        "SESSION_COOKIE_SECURE": true,
        "CORS_ALLOW_CREDENTIALS": true,
        "CORS_ALLOWED_ORIGINS": ["http://localhost:5173"]
      },
      "drf_config": {
        "DEFAULT_AUTHENTICATION_CLASSES": [
          "rest_framework.authentication.SessionAuthentication"
        ]
      }
    },
    "login_flow": {
      "endpoint": "/auth/login/",
      "method": "POST",
      "request_data": {
        "username": "string",
        "password": "string"
      },
      "response": {
        "user": "User object",
        "token": "Optional, only if JWT is implemented"
      },
      "django_implementation": "Use Django's authenticate() function with username/password"
    },
    "logout_flow": {
      "endpoint": "/auth/logout/",
      "method": "POST",
      "request_data": "Empty object",
      "response": {
        "success": "boolean"
      },
      "django_implementation": "Use Django's logout() function"
    },
    "registration_flow": {
      "endpoint": "/auth/register/",
      "method": "POST",
      "request_data": "RegisterRequest object",
      "response": "User object",
      "django_implementation": "Create user with cleaned data, hash password with Django's make_password()"
    },
    "authentication_checks": {
      "endpoint": "/user/profile/",
      "method": "GET",
      "django_implementation": "Use @permission_classes([IsAuthenticated]) decorator or equivalent"
    },
    "password_change": {
      "endpoint": "/auth/password/change/",
      "method": "POST",
      "request_data": {
        "old_password": "string",
        "new_password": "string"
      },
      "response": {
        "success": "boolean"
      },
      "django_implementation": "Use Django's check_password() and set_password() methods"
    }
  },
  "security_considerations": {
    "password_policies": {
      "minimum_length": 8,
      "character_requirements": "Include uppercase, lowercase, number, special character",
      "django_implementation": "Use Django's password validation framework"
    },
    "rate_limiting": {
      "login_attempts": "Limit failed login attempts",
      "django_implementation": "Use django-ratelimit or DRF throttling"
    },
    "session_management": {
      "session_expiry": "Set reasonable timeout (e.g., 2 weeks)",
      "django_setting": "SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds"
    },
    "secure_communication": {
      "https_required": true,
      "django_setting": "SECURE_SSL_REDIRECT = True"
    }
  },
  "alternative_auth_options": {
    "jwt_authentication": {
      "packages": ["djangorestframework-simplejwt"],
      "frontend_changes_needed": "Store token in localStorage or secure cookie",
      "pros": ["Stateless", "Scalable", "Cross-domain"],
      "cons": ["Token storage security concerns", "No easy revocation"]
    },
    "oauth_providers": {
      "packages": ["django-allauth", "django-rest-auth"],
      "frontend_changes_needed": "Implement OAuth redirect flows",
      "supported_providers": ["Google", "Facebook", "GitHub"]
    }
  },
  "code_impact": [
    "backend/config/settings.py",
    "backend/users/views.py",
    "backend/users/serializers.py",
    "backend/users/urls.py"
  ],
  "tech_stack": ["Django", "Django REST Framework", "Python"]
}
